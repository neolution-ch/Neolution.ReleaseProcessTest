name: Create Pre-Release

on:
  workflow_dispatch:
    inputs:
      type:
        description: 'Pre-release type'
        required: true
        type: choice
        options:
          - alpha
          - beta
          - rc
      action:
        description: 'Action type'
        required: true
        type: choice
        options:
          - continue
          - transition
          - new
        default: 'continue'
      level:
        description: 'Version increment level (only used for new pre-releases)'
        required: false
        type: choice
        options:
          - patch
          - minor
          - major
        default: 'patch'
      exact_version:
        description: 'Exact version (optional, overrides other settings)'
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install release-it and plugins
        run: |
          npm install -g release-it@latest
          npm install -g @release-it/keep-a-changelog@latest

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Validate branch
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          if [[ "$BRANCH_NAME" != "main" ]]; then
            echo "Error: Pre-releases can only be created from main branch"
            exit 1
          fi

      - name: Determine release command
        run: |
          CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          CURRENT_VERSION=${CURRENT_VERSION#v}
          echo "Current version: $CURRENT_VERSION"

          if [[ "$CURRENT_VERSION" == *-* ]]; then
            BASE_VERSION=${CURRENT_VERSION%%-*}
            HAS_PRERELEASE=true
            echo "BASE_VERSION=$BASE_VERSION" >> $GITHUB_ENV
          else
            HAS_PRERELEASE=false
          fi
          echo "HAS_PRERELEASE=$HAS_PRERELEASE" >> $GITHUB_ENV

          if [[ -n "${{ inputs.exact_version }}" ]]; then
            echo "USE_EXACT_VERSION=true" >> $GITHUB_ENV
          elif [[ "${{ inputs.action }}" == "continue" ]]; then
            if [[ "$CURRENT_VERSION" == *"-${{ inputs.type }}."* ]]; then
              echo "USE_CONTINUE=true" >> $GITHUB_ENV
            else
              echo "Error: Cannot continue ${{ inputs.type }} - current version doesn't contain -${{ inputs.type }}"
              exit 1
            fi
          elif [[ "${{ inputs.action }}" == "transition" ]]; then
            if [[ "$HAS_PRERELEASE" == "true" ]]; then
              echo "USE_TRANSITION=true" >> $GITHUB_ENV
            else
              echo "Error: Cannot transition - no existing pre-release to transition from"
              exit 1
            fi
          else
            if [[ "$HAS_PRERELEASE" == "true" ]]; then
              echo "Error: Cannot create new pre-release - existing pre-release found, use 'transition' instead"
              exit 1
            else
              echo "USE_NEW=true" >> $GITHUB_ENV
            fi
          fi

      - name: Run release-it
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "$USE_EXACT_VERSION" == "true" ]]; then
            VERSION="${{ inputs.exact_version }}"
            # Validate version format
            if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
              echo "Error: Invalid version format. Expected: X.Y.Z or X.Y.Z-prerelease"
              exit 1
            fi
            release-it --new-version="$VERSION" --preRelease=${{ inputs.type }} \
              --no-git.commit \
              --github.preRelease \
              --plugins.@release-it/keep-a-changelog.addUnreleased=false \
              --ci
          elif [[ "$USE_CONTINUE" == "true" ]]; then
            release-it --preRelease=${{ inputs.type }} \
              --no-git.commit \
              --github.preRelease \
              --plugins.@release-it/keep-a-changelog.addUnreleased=false \
              --ci
          elif [[ "$USE_TRANSITION" == "true" ]]; then
            VERSION="${BASE_VERSION}-${{ inputs.type }}.0"
            release-it --new-version="$VERSION" --preRelease=${{ inputs.type }} \
              --no-git.commit \
              --github.preRelease \
              --plugins.@release-it/keep-a-changelog.addUnreleased=false \
              --ci
          elif [[ "$USE_NEW" == "true" ]]; then
            release-it ${{ inputs.level }} --preRelease=${{ inputs.type }} \
              --no-git.commit \
              --github.preRelease \
              --plugins.@release-it/keep-a-changelog.addUnreleased=false \
              --ci
          fi

      - name: Display release information
        run: |
          echo "‚úÖ Pre-release completed successfully!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Type: ${{ inputs.type }}"
          if [[ -n "${{ inputs.exact_version }}" ]]; then
            echo "Exact Version: ${{ inputs.exact_version }}"
          elif [[ "${{ inputs.action }}" == "continue" ]]; then
            echo "Action: Continue current pre-release"
          elif [[ "${{ inputs.action }}" == "transition" ]]; then
            echo "Action: Transition to new pre-release type"
          else
            echo "Action: New pre-release"
            echo "Level: ${{ inputs.level }}"
          fi
          echo ""
          echo "üîó Check the release: https://github.com/${{ github.repository }}/releases"
          echo "üè∑Ô∏è View tags: https://github.com/${{ github.repository }}/tags"